{"version":3,"sources":["lib/DragOverlay.js","lib/ThresholdSlider.js","lib/ThresholdOverlay.js","lib/ThresholdSliderLite.js","lib/index.js","index.js"],"names":["DragOverlay","handleMouseMove","ev","preventDefault","stopPropagation","mouseMoveHandler","_this","props","handleMouseUp","mouseUpHandler","cursor","this","ReactDOM","createPortal","react_default","a","createElement","className","style","document","body","addEventListener","removeEventListener","PureComponent","ThresholdSlider","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getSortedY","memoize_one","data","value","map","obj","sort","b","getUpperPortion","threshold","sortedY","idx","bisect_right","length","getLowerPortion","bisect_left","handleUpperHandleDragStart","setState","dragging","handleLowerHandleDragStart","handleUpperHandleDragging","_this$props","height","minY","maxY","lowerThreshold","referenceNode","ref","current","upperThresholdDomY","clientY","getBoundingClientRect","top","upperThreshold","fromDomYCoord_Linear","Math","min","handleThresholdUpdate","handleLowerHandleDragging","_this$props2","lowerThresholdDomY","max","handleUpperHandleDragEnd","handleLowerHandleDragEnd","createThresholds","snapshot","state","React","createRef","_this$props3","width","upperPortion","lowerPortion","centerPortion","getCenterPortion","upperPortionDisplay","toFixed","lowerPortionDisplay","centerPortionDisplay","upperDomY","toDomYCoord_Linear","lowerDomY","DragOverlayElem","src_lib_DragOverlay","Fragment","xmlns","backgroundColor","jsx","id","d","concat","fill","x","y","dx","dy","stdDeviation","textAnchor","dominantBaseline","href","filter","onMouseDown","updateThresholdHandler","_this$props4","ThresholdOverlay","getStyle","overflow","position","mode","borderStyle","borderColor","borderWidth","display","justifyContent","flexDirection","alignItems","DATA","toConsumableArray","Array","keys","i","App","updateThreshold","_ref","_this$state","lib_ThresholdOverlay","lib","Component","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.aedd439f.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport PropTypes from \"prop-types\";\n// CSS\nimport \"./DragOverlay.css\"\n\nclass DragOverlay extends PureComponent {\n  render() {\n    let { cursor} = this.props\n    return ReactDOM.createPortal(\n      <div className=\"fullscreen\" style={{cursor:cursor}}></div>,\n      document.body\n    );\n  }\n\n  componentDidMount(){\n    document.addEventListener(\"mousemove\",this.handleMouseMove,true)\n    document.addEventListener(\"mouseup\",this.handleMouseUp,true)\n  }\n\n  componentWillUnmount(){\n    document.removeEventListener(\"mousemove\",this.handleMouseMove,true)\n    document.removeEventListener(\"mouseup\",this.handleMouseUp,true)\n  }\n  \n  handleMouseMove = (ev)=>{\n    ev.preventDefault();\n    ev.stopPropagation()\n    let {mouseMoveHandler} = this.props\n    mouseMoveHandler(ev)\n  }\n\n  handleMouseUp = (ev)=>{\n    ev.preventDefault();\n    ev.stopPropagation()\n    let {mouseUpHandler} = this.props\n    mouseUpHandler(ev)\n  }\n}\n\n\nDragOverlay.propTypes = {\n  cursor: PropTypes.string.isRequired,\n  mouseMoveHandler: PropTypes.func.isRequired,\n  mouseUpHandler: PropTypes.func.isRequired\n}\n\nexport default DragOverlay\n","import React, {PureComponent} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {bisect_left,bisect_right} from \"bisect\";\nimport {memoize_one} from \"memoize\";\nimport {fromDomYCoord_Linear, toDomYCoord_Linear} from \"plot-utils\";\nimport DragOverlay from \"./DragOverlay\";\n\nclass ThresholdSlider extends PureComponent {\n  constructor(props){\n    super(props);\n    this.snapshot={};\n    this.state = {dragging:false}; // false/'left'/'right'\n    this.ref = React.createRef();\n  }\n  \n  render() {\n    let {data,value,width,height,minY,maxY,upperThreshold,lowerThreshold} = this.props;\n    let {dragging} = this.state;\n    // Get portions\n    let upperPortion = this.getUpperPortion(data,value,upperThreshold);\n    let lowerPortion = this.getLowerPortion(data,value,lowerThreshold);\n    let centerPortion = this.getCenterPortion(data,value,upperThreshold,lowerThreshold);\n    let upperPortionDisplay = upperPortion.toFixed(1);\n    let lowerPortionDisplay = lowerPortion.toFixed(1);\n    let centerPortionDisplay = centerPortion.toFixed(1);\n    // Get threshold Dom positions\n    let upperDomY = toDomYCoord_Linear(height,minY,maxY,upperThreshold);\n    let lowerDomY = toDomYCoord_Linear(height,minY,maxY,lowerThreshold);\n    // DragOverlay\n    let DragOverlayElem = null;\n    if (dragging===\"upper\") {\n      DragOverlayElem = <DragOverlay  cursor=\"ns-resize\"\n                                      mouseMoveHandler={this.handleUpperHandleDragging}\n                                      mouseUpHandler={this.handleUpperHandleDragEnd}\n                                      />\n    }\n    if (dragging===\"lower\") {\n      DragOverlayElem = <DragOverlay  cursor=\"ns-resize\"\n                                      mouseMoveHandler={this.handleLowerHandleDragging}\n                                      mouseUpHandler={this.handleLowerHandleDragEnd}\n                                      />\n    }\n    return (\n      <>\n        <svg  ref={this.ref}\n              width={width} height={height}\n              xmlns=\"http://www.w3.org/2000/svg\"\n              style={{backgroundColor:\"#eeeeee\"}}>\n          <style jsx=\"true\">{`\n            text {\n              fill: white;\n              font-family: Sans;\n              pointer-events: none;\n            }\n            `}\n          </style>\n          <defs>\n            <path id=\"upperHandle\"\n                  d={`M 0 0 L 5 5 L ${width} 5 L ${width} -20 L 10 -20 z`}\n                  fill=\"#000000\"/>\n            <filter id=\"upperShadow\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n              <feDropShadow dx=\"0\" dy=\"-2\" stdDeviation=\"2\"/>\n            </filter>\n            <path id=\"lowerHandle\"\n                  d={`M 0 0 L 5 -5 L ${width} -5 L ${width} 20 L 10 20 z`}\n                  fill=\"#000000\"/>\n            <filter id=\"lowerShadow\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n              <feDropShadow dx=\"0\" dy=\"2\" stdDeviation=\"2\"/>\n            </filter>\n          </defs>\n\n          <rect x=\"0\" y={upperDomY} width={width} height={lowerDomY-upperDomY}\n                style={{fill:\"grey\"}}\n                />\n          <text x={width} y={(upperDomY+lowerDomY)/2} textAnchor=\"end\" dominantBaseline=\"middle\">{centerPortionDisplay}%</text>\n          <use  href=\"#upperHandle\" x=\"0\" y={upperDomY}\n                style={{cursor:\"ns-resize\",fill:\"grey\",filter:\"url(#upperShadow)\"}}\n                onMouseDown={this.handleUpperHandleDragStart}/>\n          <text x={width} y={upperDomY-10} textAnchor=\"end\" dominantBaseline=\"middle\">{upperPortionDisplay}%</text>\n          <use  href=\"#lowerHandle\" x=\"0\" y={lowerDomY}\n                style={{cursor:\"ns-resize\",fill:\"grey\",filter:\"url(#lowerShadow)\"}}\n                onMouseDown={this.handleLowerHandleDragStart}/>\n          <text x={width} y={lowerDomY+10} textAnchor=\"end\" dominantBaseline=\"middle\">{lowerPortionDisplay}%</text>\n        </svg>\n        {DragOverlayElem}\n      </>\n    );\n  }\n  \n  getSortedY = memoize_one( (data,value)=>{\n    return data.map( (obj)=>obj[value] )\n               .sort( (a,b)=>a-b );\n  });\n\n  getUpperPortion = memoize_one( (data,value,threshold)=>{\n    let sortedY = this.getSortedY(data,value);\n    let idx = bisect_right(sortedY,threshold);\n    return (sortedY.length-idx)/sortedY.length*100;\n  });\n  \n  getLowerPortion = memoize_one( (data,value,threshold)=>{\n    let sortedY = this.getSortedY(data,value);\n    let idx = bisect_left(sortedY,threshold);\n    return (idx+1)/sortedY.length*100\n  });\n\n  getCenterPortion(data,value,upperThreshold,lowerThreshold) {\n    let uprP = this.getUpperPortion(data,upperThreshold);\n    let lwrP = this.getLowerPortion(data,lowerThreshold);\n    let centerP = 100-uprP-lwrP;\n    return centerP;\n  }\n\n  handleUpperHandleDragStart = (ev)=>{\n    this.setState({dragging:\"upper\"});\n  }\n\n  handleLowerHandleDragStart = (ev)=>{\n    this.setState({dragging:\"lower\"});\n  }\n\n  handleUpperHandleDragging = (ev)=>{\n    let {height,minY,maxY,lowerThreshold} = this.props;\n    let referenceNode = this.ref.current;\n    let upperThresholdDomY = ev.clientY - referenceNode.getBoundingClientRect().top;\n    let upperThreshold = fromDomYCoord_Linear(height,minY,maxY,upperThresholdDomY);\n    lowerThreshold = Math.min(lowerThreshold,upperThreshold);\n    this.handleThresholdUpdate(upperThreshold,lowerThreshold);\n  }\n\n  handleLowerHandleDragging = (ev)=>{\n    let {height,minY,maxY,upperThreshold} = this.props;\n    let referenceNode = this.ref.current;\n    let lowerThresholdDomY = ev.clientY - referenceNode.getBoundingClientRect().top;\n    let lowerThreshold = fromDomYCoord_Linear(height,minY,maxY,lowerThresholdDomY);\n    upperThreshold = Math.max(lowerThreshold,upperThreshold);\n    this.handleThresholdUpdate(upperThreshold,lowerThreshold);\n  }\n\n  handleUpperHandleDragEnd = (ev)=>{\n    this.setState({dragging:null});\n  }\n\n  handleLowerHandleDragEnd = (ev)=>{\n    this.setState({dragging:null});\n  }\n\n  handleThresholdUpdate(upperThreshold,lowerThreshold) {\n    let {updateThresholdHandler} = this.props;\n    let {minY,maxY} = this.props;\n    upperThreshold = Math.max(minY,Math.min(maxY,upperThreshold));\n    lowerThreshold = Math.max(minY,Math.min(maxY,lowerThreshold));\n    let thresholds = this.createThresholds(upperThreshold,lowerThreshold);\n    updateThresholdHandler(thresholds);\n  }\n\n  createThresholds = memoize_one( (upperThreshold,lowerThreshold)=>{\n    return {upperThreshold,lowerThreshold};\n  });\n}\n\nThresholdSlider.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  minY: PropTypes.number.isRequired,\n  maxY: PropTypes.number.isRequired,\n  data: PropTypes.array.isRequired,\n  value: PropTypes.string.isRequired,\n  upperThreshold: PropTypes.number.isRequired,\n  lowerThreshold: PropTypes.number.isRequired,\n  updateThresholdHandler: PropTypes.func.isRequired,\n};\n\nexport default ThresholdSlider;\n","import React, {PureComponent} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {memoize_one} from \"memoize\";\nimport {toDomYCoord_Linear} from \"plot-utils\";\n\nclass ThresholdOverlay extends PureComponent {\n  constructor(props){\n    super(props);\n    this.mode=0; // 0: upper, 1:lower\n    this.ref = React.createRef();\n  }\n\n  getStyle = memoize_one( (width,height)=>{\n    return {width,height,overflow:\"hidden\",position:\"relative\"};\n  });\n  \n  render() {\n    let {width,height,upperThreshold,lowerThreshold,minY,maxY} = this.props;\n    let upperThresholdDomY = toDomYCoord_Linear(height,minY,maxY,upperThreshold);\n    let lowerThresholdDomY = toDomYCoord_Linear(height,minY,maxY,lowerThreshold);\n    return (\n      <div style={this.getStyle(width,height)}>\n        <div style={{ position:\"absolute\",top:upperThresholdDomY-1,\n                      width:width,height:lowerThresholdDomY-upperThresholdDomY,\n                      borderStyle:\"dashed none dashed none\",\n                      borderColor:\"red\",\n                      borderWidth:1,\n                      display:\"flex\",\n                      justifyContent:\"right\"\n                    }} >\n          <div style={{ display:\"flex\",\n                        flexDirection: \"column\",\n                        justifyContent:\"space-between\",\n                        alignItems:\"flex-end\"}}>\n            <div>\n              {upperThreshold}\n            </div>\n            <div>\n              {lowerThreshold}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nThresholdOverlay.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  minY: PropTypes.number.isRequired,\n  maxY: PropTypes.number.isRequired,\n  upperThreshold: PropTypes.number.isRequired,\n  lowerThreshold: PropTypes.number.isRequired,\n};\n\nexport default ThresholdOverlay;\n","import React, {PureComponent} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {bisect_left,bisect_right} from \"bisect\";\nimport {memoize_one} from \"memoize\";\nimport {fromDomYCoord_Linear, toDomYCoord_Linear} from \"plot-utils\";\n\nclass ThresholdSliderLite extends PureComponent {\n  constructor(props){\n    super(props);\n    this.mode=0; // 0: upper, 1:lower\n    this.ref = React.createRef();\n  }\n  \n  render() {\n    let {width,height} = this.props;\n    return (\n      <canvas ref={this.ref}\n              width={width} height={height}\n              style={{width:width,height:height,display:\"block\"}}\n              onClick={this.handleClick}>\n      </canvas>\n    );\n  }\n\n  componentDidMount(){\n    this.draw();\n  }\n\n  componentDidUpdate(){\n    this.draw();\n  }\n\n  draw(){\n    let {data,width,height,minY,maxY,upperThreshold,lowerThreshold} = this.props;\n    // Clear the graph\n    let canvas = this.ref.current;\n    let ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0,0,width,height);\n    // Coord convert\n    let upperThresholdDomY = Math.round(toDomYCoord_Linear(height,minY,maxY,upperThreshold));\n    let lowerThresholdDomY = Math.round(toDomYCoord_Linear(height,minY,maxY,lowerThreshold));\n    // Get portions\n    let upperPortion = this.getUpperPortion(data,upperThreshold);\n    let lowerPortion = this.getLowerPortion(data,lowerThreshold);\n    let centerPortion = this.getCenterPortion(data,upperThreshold,lowerThreshold);\n    let upperPortionDisplay = upperPortion.toFixed(1);\n    let lowerPortionDisplay = lowerPortion.toFixed(1);\n    let centerPortionDisplay = centerPortion.toFixed(1);\n    // Draw\n    this.drawUpperHandle(ctx,width,height,upperThresholdDomY,upperPortionDisplay);\n    this.drawLowerHandle(ctx,width,height,lowerThresholdDomY,lowerPortionDisplay);\n    this.drawCenterPiece(ctx,width,height,upperThresholdDomY,lowerThresholdDomY,centerPortionDisplay);\n  }\n\n  drawUpperHandle(ctx,width,height,upperThresholdDomY,upperPortionDisplay) {\n    ctx.beginPath();\n    ctx.fillStyle = \"black\";\n    ctx.moveTo(0,upperThresholdDomY);\n    ctx.lineTo(width,upperThresholdDomY);\n    ctx.stroke();\n    ctx.textBaseline = \"middle\";\n    ctx.textAlign = \"right\";\n    ctx.fillText(upperPortionDisplay,width-5,upperThresholdDomY-10);\n  }\n\n  drawLowerHandle(ctx,width,height,lowerThresholdDomY,lowerPortionDisplay) {\n    ctx.beginPath();\n    ctx.fillStyle = \"black\";\n    ctx.moveTo(0,lowerThresholdDomY);\n    ctx.lineTo(width,lowerThresholdDomY);\n    ctx.stroke();\n    ctx.textBaseline = \"middle\";\n    ctx.textAlign = \"right\";\n    ctx.fillText(lowerPortionDisplay,width-5,lowerThresholdDomY+10);\n  }\n\n  drawCenterPiece(ctx,width,height,lowerThresholdDomY,upperThresholdDomY,centerPortionDisplay) {\n    let centerPieceHeight = lowerThresholdDomY-upperThresholdDomY;\n    let centerDomY = Math.round((lowerThresholdDomY+upperThresholdDomY)/2);\n    ctx.fillStyle = \"lightgrey\";\n    ctx.fillStyle = \"black\";\n    ctx.textBaseline = \"middle\";\n    ctx.textAlign = \"right\";\n    ctx.fillText(centerPortionDisplay,width-5,centerDomY);\n  }\n\n  getSortedY = memoize_one( (data)=>{\n    return data.map( ({y})=>y )\n               .sort( (a,b)=>a-b )\n  });\n\n  getUpperPortion = memoize_one( (data,threshold)=>{\n    let sortedY = this.getSortedY(data);\n    let idx = bisect_right(sortedY,threshold);\n    return (sortedY.length-idx)/sortedY.length*100;\n  });\n  \n  getLowerPortion = memoize_one( (data,threshold)=>{\n    let sortedY = this.getSortedY(data);\n    let idx = bisect_left(sortedY,threshold);\n    return (idx+1)/sortedY.length*100\n  });\n\n  getCenterPortion(data,upperThreshold,lowerThreshold) {\n    let uprP = this.getUpperPortion(data,upperThreshold);\n    let lwrP = this.getLowerPortion(data,lowerThreshold);\n    let centerP = 100-uprP-lwrP;\n    return centerP;\n  }\n  \n  handleClick = (ev)=>{\n    let {height,minY,maxY} = this.props;\n    if (this.mode===0) {\n      let clickDomY = ev.clientY - ev.target.getBoundingClientRect().y;\n      let clickDataY = fromDomYCoord_Linear(height,minY,maxY,clickDomY);\n      this.setUpperThreshold(clickDataY);\n      this.mode = 1;\n    }\n    else {\n      let clickDomY = ev.clientY - ev.target.getBoundingClientRect().y;\n      let clickDataY = fromDomYCoord_Linear(height,minY,maxY,clickDomY);\n      this.setLowerThreshold(clickDataY);\n      this.mode = 0;\n    }\n  }\n\n  setUpperThreshold(y) {\n    let {updateThresholdHandler, lowerThreshold} = this.props;\n    updateThresholdHandler({upperThreshold:y,lowerThreshold:lowerThreshold});\n  }\n\n  setLowerThreshold(y) {\n    let {updateThresholdHandler, upperThreshold} = this.props;\n    updateThresholdHandler({upperThreshold:upperThreshold,lowerThreshold:y});\n  }\n}\n\nThresholdSliderLite.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  minY: PropTypes.number.isRequired,\n  maxY: PropTypes.number.isRequired,\n  data: PropTypes.array.isRequired,\n  upperThreshold: PropTypes.number.isRequired,\n  lowerThreshold: PropTypes.number.isRequired,\n  updateThresholdHandler: PropTypes.func.isRequired,\n};\n\nexport default ThresholdSliderLite;\n","import ThresholdSlider from \"./ThresholdSlider\";\nimport ThresholdSliderLite from \"./ThresholdSliderLite\";\nimport ThresholdOverlay from \"./ThresholdOverlay\";\n\nexport default ThresholdSlider;\nexport {ThresholdSliderLite,ThresholdOverlay};\n","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport ThresholdSlider, {ThresholdOverlay} from \"./lib\";\n\nconst DATA = [...new Array(10000).keys()].map( i=>({x:i,y:i}) );\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={width:100,\n                height:400,\n                lowerThreshold:100,\n                upperThreshold:9050\n                };\n  }\n\n  updateThreshold = ({upperThreshold,lowerThreshold})=>{\n    this.setState({upperThreshold:upperThreshold,lowerThreshold:lowerThreshold});\n  }\n  \n  render() {\n    let {width,height,lowerThreshold,upperThreshold} = this.state;\n    return (\n      <div style={{display:\"flex\"}}>\n        <ThresholdOverlay width={width}\n                          height={height}\n                          minY={0}\n                          maxY={10000}\n                          lowerThreshold={lowerThreshold}\n                          upperThreshold={upperThreshold}\n                          />\n        <ThresholdSlider  data={DATA}\n                          value=\"y\"\n                          width={width}\n                          height={height}\n                          minY={0}\n                          maxY={10000}\n                          lowerThreshold={lowerThreshold}\n                          upperThreshold={upperThreshold}\n                          updateThresholdHandler={this.updateThreshold}\n                          />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}